Gitz {
  // ────────────────────────── Top‑level ──────────────────────────
  Program                  = Statement*                              --program

  // Helper: prevents identifiers from starting with a reserved word
  reservedKeywordBoundary  = reservedKeyword ~(alnum | "_")

  // ─────────────────────────── Statements ─────────────────────────
  Statement =
      VarDecl                                                   --stmtVarDecl
    | FunDecl                                                   --stmtFunDecl
    | Assignment                                                --stmtAssignment
    | FunCallStatement                                          --stmtFunCall
    | ReturnStmt                                                --stmtReturn
    | IfStmt                                                    --stmtIf
    | LoopStmt                                                  --stmtLoop
    | TryStmt                                                   --stmtTry
    | BreakStmt                                                 --stmtBreak
    | ContinueStmt                                              --stmtContinue
    | SayStmt                                                   --stmtSay
    | ParenStmt                                                 --parenStmt

  ParenStmt               = "(" Exp ")" ";"

  FunCallStatement        = FunCall ";"                            --funCallStmt
  BreakStmt               = "Break" ";"                            --breakStmt
  ContinueStmt            = "Skip" ";"                             --continueStmt
  SayStmt                 = "say" "(" ExpList? ")" ";"             --sayStmt

  // ─────────────────────── Declarations ──────────────────────────
  VarDecl                 = "Make" id ":" Type Initialiser? ";"    --varDecl
  Initialiser             = "=" Exp                                --init

  // ──────────────────────── Functions ────────────────────────────
  FunDecl                 = "Show" id Params ReturnType? Block     --funDecl
  Params                  = "(" ParamList? ")"                     --params
  ParamList               = Param ("," Param)*                     --paramList
  Param                   = id ":" Type                            --param
  ReturnType              = "->" Type                              --returnType

  // ───────────────────────── Returns ─────────────────────────────
  ReturnStmt              = "give" Exp? ";"                        --returnStmt

  // ─────────────────────── Conditionals ──────────────────────────
  IfStmt                  = "When" Exp Block OrWhenClause* ElseClause?  --ifStmt
  OrWhenClause            = "orWhen" Exp Block                         --orWhenClause
  ElseClause              = "orElse" Block                             --elseClause

  // ───────────────────────── Loops ───────────────────────────────
  LoopStmt                = LoopForEach | LoopWhile
  LoopForEach             = "Keep" id "in" Exp Block                 --loopForEach
  LoopWhile               = "Keep" Exp Block                         --loopWhile

  // ─────────────── Assignments & Indexing ────────────────────────
  Assignment              = AssignValid | AssignInvalid
  AssignValid             = (id | IndexedAccess) "=" Exp ";"         --assignValid
  AssignInvalid           = Literal "=" Exp ";"                      --assignInvalid
  IndexedAccess           = id "[" Exp "]"                           --index

  // ─────────────────── Function Calls ────────────────────────────
  FunCall                 = FunCallArgs | FunCallNoArgs
  FunCallArgs             = id "(" ArgList ")"                       --funCallArgs
  FunCallNoArgs           = id "(" ")"                               --funCallNoArgs
  ArgList                 = Exp ("," Exp)*                           --argList

  // ─────────────────────── Try / Catch ───────────────────────────
  TryStmt                 = "Try" Block "Catch" id Block             --tryStmt

  // ───────────────────────── Blocks ──────────────────────────────
  Block                   = "{" Statement* "}"                       --block

  // ─────────────────────── Expressions ───────────────────────────
  Exp                     = LogicalOrExp                             --exp

  LogicalOrExp            = LogicalAndExp ("or"  LogicalAndExp)*     --lor
  LogicalAndExp           = EqualityExp   ("and" EqualityExp)*       --land
  EqualityExp             = RelationalExp (EqualityOp RelationalExp)*--eqExp
  EqualityOp              = "==" | "!=" | "equal" | "notSame"
  RelationalExp           = AdditiveExp  (RelOp AdditiveExp)*        --relExp
  RelOp                   = "<" | ">" | "bigger" | "smaller" | "in"
  AdditiveExp             = MultiplicativeExp (AddOp MultiplicativeExp)* --addExp
  AddOp                   = "plus" | "minus"
  MultiplicativeExp       = UnaryExp (MulOp UnaryExp)*               --mulExp
  MulOp                   = "times" | "over" | "mod"
  UnaryExp                = ("minus" | "not")? PrimaryExp            --unary

  // ─────────────────── Primary expressions ───────────────────────
  PrimaryExp =
      "(" Exp ")"                                              --parens
    | FunCall                                                  --primaryFunCall
    | IndexedAccess                                            --primaryIndex
    | id                                                       --primaryId
    | FloatLit                                                 --primaryFloat
    | IntLit                                                   --primaryInt
    | StringLit                                                --primaryString
    | ListExp                                                  --primaryList
    | booleanLiteral                                           --primaryBool

  booleanLiteral           = "true" | "false"

  // ─────────────────────────── Types ─────────────────────────────
  Type                     = ListType | BasicType                   --type
  BasicType                = "num" | "text" | "bool" | "void" | id  --basicType
  ListType                 =
      "list" "[" Type "]"                                         --listTypeSquare
    | "list" "<" Type ">"                                         --listTypeAngle

  // ─────────────── Identifiers & Literals ────────────────────────
  id                       = ~reservedKeywordBoundary
                             letter (alnum | "_")*                 --identifier

  IntLit                   = digit+                                --intLit
  FloatLit                 = digit+ "." digit+ ExpPart?            --floatFull
                           | digit+ "." ExpPart?                   --floatTrailingDot
                           | "." digit+ ExpPart?                   --floatLeadingDot
  ExpPart                  = ("E" | "e") ("+" | "-")? digit+       --expPart
  StringLit                = "\"" Char* "\""                       --stringClosed
  ListExp                  = "[" ExpList? "]"                      --listExp
  ExpList                  = Exp ("," Exp)*                        --expList
  Literal                  = IntLit | FloatLit | StringLit | booleanLiteral

  // ─────────────── Characters inside strings ────────────────────
  Char                     = NormalChar | EscapeSeq | UnicodeEscape --char
  NormalChar               = ~Control ~"\\" ~"\"" any              --normalChar
  EscapeSeq                = "\\" ("n" | "t" | "\"" | "\\")        --escapeSeq
  UnicodeEscape            = "\\u{" hexDigit+ "}"                  --unicodeEscape
  Control                  = "\x00".."\x1f" | "\x80".."\x9f"       --control

  // ─────────────────── Reserved keywords ─────────────────────────
  reservedKeyword =
      "Make" | "Show" | "When" | "orWhen" | "orElse" | "Keep"
    | "Try"  | "Catch" | "Break" | "Skip" | "give"   | "say"
    | "and"  | "or"    | "not"  | "equal" | "notSame"
    | "bigger" | "smaller" | "in"
    | "plus" | "minus" | "times" | "over" | "mod"
    | "true" | "false" | "void"

  // ───────────────────── Whitespace & comments ──────────────────
  space               += comment | multiLineComment
  comment                = "#" (~"\n" any)*                        --lineComment
  multiLineComment       = "/*" (~"*/" any)* "*/"                  --blockComment
}
